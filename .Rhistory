dt1
ymd_hms(dt1)
hh:22:14("03:22:04")
hms("03:22:04")
hms("03:22:04")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrival)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
dim(means)
length(means)
?cumsum
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
mns = NULL
set.seed(10)
lambda <- 0.2
n <- 40
simu <- 1000
mns = NULL
for (i in 1:simu) mns = c(mns, mean(rexp(n, lambda)))
hist(mns)
dim(mns)
length(mns)
sampMean <- mean(mns)
sampMean
sampMean <- round(mean(mns), 1)
sampMean
sampMean <- round(mean(mns), 3)
sampMean
theoMean <- round(1/lambda, 3)
theoMean
theoMean <- round(1/lambda, 4)
theoMean
sampMean <- round(mean(mns), 4)
sampMean
sampVar <- round(sd(mns), 4)
sampVar
theoVar <- round((1/lambda)/sqrt(n), 4)
theoVar
sampVar <- round(sd(mns)^2, 4)
sampVar
theoVar <- round(((1/lambda)/sqrt(n))^2, 4)
theoVar
library(ggplot2)
ggplot(mns,aes(x=mns) +
geom_histogram(binwidth=lambda,aes(y = ..density..))
)
mns1 <- data.frame(mns)
mns1 <- data.frame(mns)
ggplot(mns1,aes(x=mns) +
geom_histogram(binwidth=lambda,aes(y = ..density..))
)
ggplot(mns,aes(x=mns)) +
geom_histogram(binwidth=lambda,aes(y = ..density..))
mns1 <- data.frame(mns)
ggplot(mns1,aes(x=mns)) +
geom_histogram(binwidth=lambda,aes(y = ..density..))
ggplot(mns1,aes(x=mns)) +
geom_histogram(binwidth=lambda, fill="yellow", color="black", aes(y = ..density..))
ggplot(mns1,aes(x=mns)) +
geom_histogram(binwidth=lambda, fill="yellow", color="black", aes(y = ..density..)) +
labs(title="Density of means of exponential distribution", x="Mean", y="Density") +
geom_vline(xintercept=theoMean, color="green", linetype="longdash")
ggplot(mns1,aes(x=mns)) +
geom_histogram(binwidth=lambda, fill="yellow", color="black", aes(y = ..density..)) +
labs(title="Density of means of exponential distribution", x="Mean", y="Density") +
geom_vline(xintercept=theoMean, color="green", size=1.0, linetype="longdash")
ggplot(mns1,aes(x=mns)) +
geom_histogram(binwidth=lambda, fill="yellow", color="black", aes(y = ..density..)) +
labs(title="Density of means of exponential distribution", x="Mean", y="Density") +
geom_vline(xintercept=theoMean, color="green", size=1.5, linetype="longdash")
ggplot(mns1,aes(x=mns)) +
geom_histogram(binwidth=lambda, fill="yellow", color="black", aes(y = ..density..)) +
labs(title="Density of means of exponential distribution", x="Mean", y="Density") +
geom_vline(xintercept=theoMean, color="red", size=1.5, linetype="longdash")
library(datasets)
data(ToothGrowth)
toothData <- data(ToothGrowth)
dim(toothData)
length(toothData)
toothData <- data.frame(ToothGrowth)
dim(toothData)
summary(toothData)
ggplot(data=toothData, aes(x=as.factor(dose), y=len)) +
geom_bar(stat="identity") +
facet_grid(. ~ supp) +
xlab("Dose") +
ylab("Tooth length")
ggplot(data=toothData, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity") +
facet_grid(. ~ supp) +
xlab("Dose") +
ylab("Tooth length")
ggplot(data=toothData, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity") +
facet_grid(. ~ supp) +
xlab("Dose") +
ylab("Tooth length")
fit <- lm(len ~ dose + supp, data=toothData)
summary(fit)
confint(fit)
ggplot(data=toothData, aes(x=supp, y=len, fill=supp)) +
geom_box(stat="identity")
ggplot(data=toothData, aes(x=supp, y=len, fill=supp)) +
geom_boxplot(stat="identity")
ggplot(data=toothData, aes(x=supp, y=len)) +
geom_boxplot(aes(fill=supp))
ggplot(data=toothData, aes(x=supp, y=len)) +
geom_boxplot()
ggplot(data=toothData, aes(x=len, fill=dose)) +
geom_density(alpha = 0.5)
class(toothData$len)
ggplot(data=toothData, aes(x=len)) +
geom_density(alpha = 0.5, fill=dose)
ggplot(data=toothData, aes(x=len, fill=dose))
ggplot(data=toothData, aes(x=len, fill=dose)) +
geom_density(alpha = 0.5)
ggplot(data=toothData, aes(x=len, fill=as.factor(dose))) +
geom_density(alpha = 0.5)
toothData$dose <- as.factor(toothData$dose)
ggplot(data=toothData, aes(x=len, fill=dose)) +
geom_density(alpha = 0.5)
swirl()
library(swirl)
swirl()
0.997*0.0001
0.997*0.00001
0.997*0.001
0.985*(1-0.001)
(1-0.985)*(1-0.001)
0.997*0.001/((0.997*0.001)+((1-0.985)*(1-0.001)))
library(swirl)
swirl()
3.5
expect_dice
dice_high
sum(dice_high)
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh+edl)
integrate(1/2*x^2, lower=0, higher=2)
integrate(f(x)=1/2*x^2, lower=0, higher=2)
integrate(x^2/2, lower=0, higher=2)
integrate(myfunc, lower=0, higher=2)
integrate(myfunc, lower=0, upper=2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
x <- z(0.18, -1.54, 0.42, 0.95)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x -1)
data(mtcars)
dim(mtcars)
names(mtcars)
lm(y=mtcars$mpg, x=mtcars$wt)
lm(y=mtcars$mpg ~ x=mtcars$wt)
lm(mtcars$mpg ~ mtcars$wt)
lm(mtcars$mpg ~ mtcars$wt - 1)
lm(mtcars$mpg ~ mtcars$wt - 1, data=mtcars)
lm(I(mpg-mean(mpg)) ~ I(wt-mean(wt))- 1, data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
y <- (x-mean(x))/sd(x)
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2,1,3,1)
xw <- x*w
xw
mean(xw)
mean(x)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
plot(child~parent, data=galton)
plot(jitter(child,4)~parent, data=galton)
lm(formula=child~parent, data=galton)
lm(child~parent, data=galton)
lm(child~parent, galton)
regrline <- lm(formula=child~parent, data=galton)
abline(regrline, lwd=3, col="red")
summary(regline)
summary(regrline)
lm(child~parent, galton)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slop <- fit$coef[2]
ols.slope <- fit$coef[2]
rhs-lhs
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.ic+ols.slope*galton$parent))
varEst <- var(est(ols.slope*galton$parent, intercept=ols.ic))
varEst <- var(est(ols.slope, intercept=ols.ic))
all.equal(varChild, (varRes+varEst))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(swirl)
swirl()
cor(gpa_nor, gch_nor)
l-nor <- lm(parent ~ child, galton)
l_nor <- lm(parent ~ child, galton)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
(sum(fit$residuals**2)/(length(fit$residuals) - 2))**0.5
sqrt(sum(fit$residuals^2) / (n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- (galton$child-mu)^2
sTot <- sum(galton$child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- sum(deviance(lm(child~parent, galton))^2)
sRes <- deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r.squared
(cor(galton$child, galton$parent))^2
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child~1,galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Grith", trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
library(swirl)
swirl()
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
corr(swiss$Examination, swiss$Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
coef(efit)-coef(all)
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
names(sA)
sA
sA[,2]
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <. lm(count~spray, InsectSprays)
fit < lm(count~spray, InsectSprays)
fit < lm(count~as.numeric(spray), InsectSprays)
fit < lm(count~as.character(spray), InsectSprays)
fit <- lm(count~spray, InsectSprays)
fit$coef
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray-1,InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count~spray, spray2)
fit2 <- lm(count~spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric~Year, hunger)
summary(fit)$coef
lmF <- hunger[Sex=="Female,"]
lmF <- mf(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"], hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"], hunger)
lmBoth <- lm(Numeric[hunger$Sex=="Male"]+Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Male"]+Year[hunger$Sex=="Female"], hunger)
lmBoth <- lm(Numeric ~ Year+Sex,hunger)
summary(lmBoth)
lmInter <- lm(Numeric~Year+Sex+Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fit <- lm(y ~ x, out2[-1,])
fitno <- lm(y ~ x, out2[-1,])
plot(fitno,which=1)
coef(fit)- coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sum((y)^2)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residuals(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
dy / 2*sigma^2
sum(dy / 2*sigma^2)
sum(dy^2 / 2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~., swiss)
vif(mdl)
mdl2 <- lm(Fertility~-Examination,swiss)
mdl2 <- lm(Fertility~.-Examination,swiss)
vif(mdl2)
xlc <- simbias()
x1c <- simbias()
apply(x1c,1,mean)
fit1 <- lm(Fertility~Agriculture,swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture+Examination+Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
head(ravenData)
ravenData
mdl <- lm(ravenWinNum ~ ravenScore, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000, 50))
next()
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl,"date"))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date, offset=log(visits+1), hits)
mdl2 <- glm(visits ~ date, poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
data(mtcars)
names(mtcars)
dim(mtcars)
str(mtcars)
?mtcars
mtcars[mtcars$am==0,] <- "automatic"; mtcars[mtcars$am==1,] <- "manual"
str(mtcars)
data(mtcars)
mtcars[mtcars$am==0,mtcars$am] <- "automatic"; mtcars[mtcars$am==1,mtcars$am] <- "manual"
mtcars[mtcars$am==0,mtcars$am] <- c("automatic"); mtcars[mtcars$am==1,mtcars$am] <- c("manual")
mtcars$am[mtcars$am==0] <- "automatic"; mtcars$am[mtcars$am==1] <- "manual"
str(mtcars)
mtcars$am  <- factor(mtcars$am)
boxplot(mpg ~ am, mtcars)
boxplot(mpg ~ am, mtcars, color=c("blue", "yellow"))
boxplot(mpg ~ am, mtcars, col=c("blue", "yellow"))
ggplot(mtcars, aes(x=am, y=mpg, col=c("blue", "yellow"))) +
geom_boxplot() +
ylab = "Miles/(US) gallon" +
xlab = "Transmission"
library(ggplot2)
ggplot(mtcars, aes(x=am, y=mpg, col=c("blue", "yellow"))) +
geom_boxplot() +
ylab("Miles/(US) gallon") +
xlab("Transmission")
ggplot(mtcars, aes(x=am, y=mpg, fill=c("blue", "yellow"))) +
geom_boxplot() +
ylab("Miles/(US) gallon") +
xlab("Transmission")
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(color=c("blue", "yellow")) +
ylab("Miles/(US) gallon") +
xlab("Transmission")
ggplot(mtcars, aes(x=am, y=mpg)) +
geom_boxplot(fill=c("blue", "yellow")) +
ylab("Miles/(US) gallon") +
xlab("Transmission")
?steps
?step
1model <- glm(mpg ~ am, data = mtcars)
y <- data(mtcars)
1model <- glm(mpg ~ am, data = y)
1model <- glm(mpg ~ am, binomial, y)
str(y)
rm(list=ls(all=TRUE))
y
data(mtcars)
mtcarsNew <- mtcars
mtcarsNew$am[mtcarsNew$am==0] <- "automatic"
mtcarsNew$am[mtcarsNew$am==1] <- "manual"
ggplot(mtcarsNew, aes(x=am, y=mpg)) +
o
library(ggplot2)
ggplot(mtcarsNew, aes(x=am, y=mpg)) +
geom_boxplot(color=c("blue", "yellow")) +
ylab("Miles/(US) gallon") +
xlab("Transmission")
str(mtcars)
str(mtcarsNew)
1model <- glm(mpg ~ am, mtcars)
modelA <- glm(mpg ~ am, mtcars)
modelA <- glm(mpg ~ am, binomial, mtcars)
modelA <- glm(mpg ~ factor(am), binomial, mtcars)
modelA <- lm(mpg ~ am, mtcars)
modelA
modelB <- lm(mpg ~ am, mtcarsNew)
modelB
￼t.test(mpg ~ am, data = mtcars)
t.test(mpg ~ am, data = mtcars)
t.test(mpg ~ am, data = mtcarsNew)
modelB <- lm(mpg ~ factor(am), mtcarsNew)
modelB
mtcarsNew$am <- factor(mtcars$am)
modelB <- lm(mpg ~ am, mtcarsNew)
modelB
mtcarsNew$am[mtcarsNew$am==0] <- "automatic"
mtcarsNew$am[mtcarsNew$am==1] <- "manual"
mtcarsNew$am <- factor(mtcarsNew$am)
modelB <- lm(mpg ~ am, mtcarsNew)
modelA <- lm(mpg ~ ., mtcars)
modelA
modelA <- lm(mpg ~ .-1, mtcars)
modelA
summary(modelA)
modelB <- lm(mpg ~ am, mtcarsNew)
mtcarsNew <- mtcars
mtcarsNew$am[mtcarsNew$am==0] <- "automatic"
mtcarsNew$am[mtcarsNew$am==1] <- "manual"
modelB <- lm(mpg ~ am, mtcarsNew)
summary(modelB)
modelB <- lm(mpg ~ am-1, mtcarsNew)
summary(modelB)
data(mtcars)
mtcars$am[mtcars$am==0] <- "automatic"
mtcars$am[mtcars$am==1] <- "manual"
mtcars$am <- factor(mtcars$am)
allModel <- lm(mpg ~ ., data = mtcars)
summary(allModel)
amModel <- lm(mpg ~ am, data = mtcars)
summary(amModel)
mtcars$am
modelData <- read.csv("modelData.csv")
setwd("/Volumes/MS3&4/Coursera/Data Science/machine learning/project/praMachLearn/github")
